// <auto-generated />
using System;
using DungeonWorldBot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DungeonWorldBot.Data.Migrations
{
    [DbContext(typeof(DungeonWorldContext))]
    [Migration("20221008052258_Navigation_Prop")]
    partial class Navigation_Prop
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Bond", b =>
                {
                    b.Property<ulong>("ID")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("CharacterID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CharacterID");

                    b.ToTable("Bond");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Character", b =>
                {
                    b.Property<ulong>("ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Alignment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArmorRating")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InventoryID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Race")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("LocationID");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Class", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("CharacterID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CharacterID")
                        .IsUnique();

                    b.ToTable("Class");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Debility", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("CharacterID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Modifier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatType")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CharacterID");

                    b.ToTable("Debility");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Health", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("CharacterID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentHP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxHP")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CharacterID")
                        .IsUnique();

                    b.ToTable("Health");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Inventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentLoad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLoad")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InventoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("InventoryID");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Stat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("CharacterID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CharacterID");

                    b.ToTable("Stat");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Bond", b =>
                {
                    b.HasOne("DungeonWorldBot.Data.Entities.Character", null)
                        .WithMany("Bonds")
                        .HasForeignKey("CharacterID");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Character", b =>
                {
                    b.HasOne("DungeonWorldBot.Data.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryID");

                    b.HasOne("DungeonWorldBot.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID");

                    b.Navigation("Inventory");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Class", b =>
                {
                    b.HasOne("DungeonWorldBot.Data.Entities.Character", "Character")
                        .WithOne("Class")
                        .HasForeignKey("DungeonWorldBot.Data.Entities.Class", "CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Debility", b =>
                {
                    b.HasOne("DungeonWorldBot.Data.Entities.Character", null)
                        .WithMany("Debilities")
                        .HasForeignKey("CharacterID");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Health", b =>
                {
                    b.HasOne("DungeonWorldBot.Data.Entities.Character", "Character")
                        .WithOne("Health")
                        .HasForeignKey("DungeonWorldBot.Data.Entities.Health", "CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Item", b =>
                {
                    b.HasOne("DungeonWorldBot.Data.Entities.Inventory", null)
                        .WithMany("Items")
                        .HasForeignKey("InventoryID");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Stat", b =>
                {
                    b.HasOne("DungeonWorldBot.Data.Entities.Character", null)
                        .WithMany("Stats")
                        .HasForeignKey("CharacterID");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Character", b =>
                {
                    b.Navigation("Bonds");

                    b.Navigation("Class")
                        .IsRequired();

                    b.Navigation("Debilities");

                    b.Navigation("Health")
                        .IsRequired();

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("DungeonWorldBot.Data.Entities.Inventory", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
